// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth

model Client {
    ClientID            Int        @id  @db.SmallInt
    ContractID          Int        @unique  @db.SmallInt
    FirstName           String?    @db.VarChar(15)
    LastName            String?    @db.VarChar(15)
    MiddleName          String?    @db.VarChar(15)
    Email               String?    @db.VarChar(50)
    CellNum             String?    @db.VarChar(15)
    TelNum              String?    @db.VarChar(15)
    CityAdd             String?    @db.VarChar(30)
    Remarks             String?    @db.VarChar(200)
    user                String?    @db.VarChar(20)
    pass                String?    @db.Char(50)
    cases               Cases[]
    contracts           Contract[] @relation("NumContracts")
    contract            Contract?  @relation("SameID", fields: [ContractID], references: [ContractID])
}

model Lawyer {
    LawyerID            Int        @id  @db.SmallInt
    FirstName           String?    @db.VarChar(15)
    LastName            String?    @db.VarChar(15)
    MiddleName          String?    @db.VarChar(15)
    Email               String?    @db.VarChar(50)
    AltEmail            String?    @db.VarChar(50)
    CellNum             String?    @db.VarChar(15)
    TelNum              String?    @db.VarChar(15)
    CityAdd             String?    @db.VarChar(30)
    isManager           Boolean?   @db.Bit(1)  @default(false)
    user                String?    @db.VarChar(20)
    pass                String?    @db.Char(50)
    cases               Cases[]
    works               Work[]
}

model Contract {
    ContractID          Int        @id  @db.SmallInt
    ClientID            Int        @db.SmallInt
    MajorPleading       Int?       @db.SmallInt
    MinorPleading       Int?       @db.SmallInt
    PartnerApp          Int?       @db.SmallInt
    JuniorAssocApp      Int?       @db.SmallInt
    SeniorAssocApp      Int?       @db.SmallInt
    cases               Cases[]
    client              Client?    @relation("SameID")
    clients             Client?    @relation("NumContracts", fields: [ClientID], references: [ClientID])
    
}

model Work {
    WorkID              Int        @id  @db.SmallInt
    CaseNum             String     @db.VarChar(10)
    Type                String?    @db.VarChar(12)
    Date                DateTime?  @db.Date
    Remarks             String?    @db.VarChar(100)
    location            String?    @db.VarChar(100)
    filename            String?    @db.VarChar(20)
    lawyers             Lawyer[]
    case                Cases?      @relation(fields: [CaseNum], references: [CaseNum])
}

model Cases {
    CaseNum             String     @id  @db.VarChar(10)
    ContractID          Int        @db.SmallInt
    ClientID            Int        @db.SmallInt
    Status              String?    @db.VarChar(300)
    Type                String?    @db.VarChar(20)
    works               Work[]
    lawyers             Lawyer[]
    client              Client?    @relation(fields: [ClientID], references: [ClientID])
    contract            Contract?  @relation(fields: [ContractID], references: [ContractID])
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? @db.Text
//     access_token      String? @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }