// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Client {
    ClientID            Int        @id  @db.SmallInt
    ContractID          Int        @unique  @db.SmallInt
    FirstName           String?    @db.VarChar(15)
    LastName            String?    @db.VarChar(15)
    MiddleName          String?    @db.VarChar(15)
    Email               String?    @db.VarChar(50)
    CellNum             String?    @db.VarChar(15)
    TelNum              String?    @db.VarChar(15)
    CityAdd             String?    @db.VarChar(30)
    Remarks             String?    @db.VarChar(200)
    user                String?    @db.VarChar(20)
    pass                String?    @db.Char(50)
    cases               Case[]
    payments            Payment[]
    clients             Contract[] @relation("people")
    contracts           Contract?  @relation("sameID", fields: [ContractID], references: [ContractID])
}

model Lawyer {
    LawyerID            Int        @id  @db.SmallInt
    FirstName           String?    @db.VarChar(15)
    LastName            String?    @db.VarChar(15)
    MiddleName          String?    @db.VarChar(15)
    Email               String?    @db.VarChar(50)
    AltEmail            String?    @db.VarChar(50)
    CellNum             String?    @db.VarChar(15)
    TelNum              String?    @db.VarChar(15)
    CityAdd             String?    @db.VarChar(30)
    isManager           Boolean?   @db.Bit(1)  @default(false)
    user                String?    @db.VarChar(20)
    pass                String?    @db.Char(50)
    cases               Case[]
    works               Work[]
}

model Contract {
    ContractID          Int        @id  @db.SmallInt
    ClientID            Int        @db.SmallInt
    MajorPleading       Int?       @db.SmallInt
    MinorPleading       Int?       @db.SmallInt
    PartnerApp          Int?       @db.SmallInt
    JuniorAssocApp      Int?       @db.SmallInt
    SeniorAssocApp      Int?       @db.SmallInt
    isAmendment         Boolean?   @db.Bit(1)  @default(false)
    RootContractID      Int?       @db.SmallInt
    Date                DateTime?  @db.Date
    cases               Case[]
    // roots               Contract[] @relation("root")
    // root                Contract?  @relation("root", fields: [RootContractID], references: [ContractID])
    contracts           Client?    @relation("sameID")
    clients             Client?    @relation("people", fields: [ClientID], references: [ClientID])
}

model Work {
    WorkID              Int        @id  @db.SmallInt
    CaseNum             String     @db.VarChar(10)
    Type                String?    @db.VarChar(20)
    Date                DateTime?  @db.Date
    Remarks             String?    @db.VarChar(100)
    location            String?    @db.VarChar(100)
    filename            String?    @db.VarChar(20)
    Title               String?    @db.VarChar(40)
    FeeAmt              Int?       @db.SmallInt
    lawyers             Lawyer[]
    case                Case?      @relation(fields: [CaseNum], references: [CaseNum])
}

model Case {
    CaseNum             String     @id  @db.VarChar(10)
    ContractID          Int        @db.SmallInt
    ClientID            Int        @db.SmallInt
    Status              String?    @db.VarChar(300)
    Type                String?    @db.VarChar(20)
    Title               String?    @db.VarChar(40)
    Venue               String?    @db.VarChar(40)
    works               Work[]
    lawyers             Lawyer[]
    client              Client?    @relation(fields: [ClientID], references: [ClientID])
    contract            Contract?  @relation(fields: [ContractID], references: [ContractID])
}

model Payment {
    PaymentID           Int        @id  @db.SmallInt
    ClientID            Int        @db.SmallInt
    Amount              Int        @db.Int
    Date                DateTime?  @db.Date
    client              Client?    @relation(fields: [ClientID], references: [ClientID])
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}